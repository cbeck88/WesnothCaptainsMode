#define DESCRIPTION_AND_OBJECTIVES
    description= _ "Pick and ban units for a duel."
    objectives= _ "Pick and ban units for a duel. 

In the next scenario, you will only be able to recruit the units that you pick in this scenario. 
Each unit can only be picked by one side. You may also ban units so that no one may pick them. 

Select a unit on your turn by recruiting it.
The banned units are displayed as petrified.

You can determine if you are picking / banning by looking at the schedule at left."
#enddef

#define SIDE_DEFAULTS NUM
        id=RBY_Side{NUM}
        side={NUM}
        save_id=RBY_Side{NUM}
        persistent=yes
        controller=human
        canrecruit=yes
        shroud=no
        fog=no
        gold=800
	income=20
        [ai]
            villages_per_scout=8
        [/ai]
#enddef

#MODERATOR_GREETING creates the moderator and issues the greeting
#define MODERATOR_GREETING
	 [unit]
		type = {MODERATOR_TYPE}
		x = {MOD_X}
		y = {MOD_Y}
		side = 3
	 [/unit]		

	 [message]
		x = {MOD_X}
		y = {MOD_Y}
		message = "Welcome to Captain's Mode!

Take turns picking and banning units for the upcoming battle! Sometimes for fairness
a player will get to pick twice in a row. You will pick a total of " + $TOTAL_PICKS + " units for your recruit.

On your turn, recruit the unit that you wish to pick / ban. Banned units will appear petrified."
	[/message]
#enddef

#The draw list macro sets labels on the map to show the schedule, offset from hex LIST_LOC_X, LIST_LOC_Y
#It assumes variabes SCHED_X , SCHED_Y, SCHED_P, SCHED_B with variables in .val key, and PICK_CTR is the curent.
#It tries to pull strings from PHASE_STR_ARR until it runs out. Could make these names macro arguments...
#define DRAW_LIST
[label]
	x = {LIST_LOC_X}
	y = {LIST_LOC_Y}
	text = "Pick Schedule:"
[/label]

{VARIABLE phase_start 0}
{VARIABLE phase_ctr 0}

[while]
	{VARIABLE_CONDITIONAL phase_start less_than $SCHED_P.length}
	[do]
		{VARIABLE li $phase_start}
		{VARIABLE_OP li add 1}
	
		{IF_VAR phase_start equals $PICK_CTR (
			[then]
				{VARIABLE phase_string ("*P"+$SCHED_P[$phase_start].val +"*")}
				{VARIABLE is_current_phase true}
			[/then]
			[else]
				{VARIABLE phase_string ("P"+$SCHED_P[$phase_start].val)}
				{VARIABLE is_current_phase false}
			[/else]
		)}
		[while]
			{VARIABLE_CONDITIONAL li less_than $SCHED_P.length}
			{VARIABLE_CONDITIONAL SCHED_B[$li].val boolean_equals $SCHED_B[$phase_start].val}
			[do]
				{IF_VAR li equals $PICK_CTR (
					[then]
						{VARIABLE phase_string ( $phase_string + ", *P" + $SCHED_P[$li].val + "*" )}
						{VARIABLE is_current_phase true}
					[/then]
					[else]
						{VARIABLE phase_string ( $phase_string + ", P" + $SCHED_P[$li].val )}
					[/else]
				)}
				{VARIABLE_OP li add 1}
			[/do]
		[/while]

		{IF_VAR phase_ctr less_than $PHASE_STR_ARR.length (
			[then]
				{VARIABLE tempstr $PHASE_STR_ARR[$phase_ctr].val}
				{VARIABLE_OP phase_ctr add 1}
			[/then]
			[else]
				{IF_VAR (SCHED_B[$phase_start].val) equals true (
					[then]
						{VARIABLE tempstr "Ban Phase"}
					[/then]
					[else]
						{VARIABLE tempstr "Pick Phase"}
					[/else]
				)}
			[/else]
		)}

		{IF_VAR is_current_phase equals true (
			[then]
				{VARIABLE c {LIST_COLOR_HIGHLIGHTED}}
			[/then]
			[else]
				{VARIABLE c {LIST_COLOR}}
			[/else]				
		)}

		[label]
			x = $"({LIST_LOC_X}+0)"
			y = $"({LIST_LOC_Y}+$phase_ctr)"
			text = $tempstr
			color = $c
		[/label]
		[label]
			x = $"({LIST_LOC_X}+1)"
			y = $"({LIST_LOC_Y}+$phase_ctr)"
			text = $phase_string
			color = $c
		[/label]
			
		{VARIABLE phase_start $li}
	[/do]
[/while]

{CLEAR_VARIABLE (phase_start, phase_ctr, is_current_phase, phase_string, li, tempstr, c)}
#enddef

#The captains_prestart macro initializes the schedule variables and calls for the list to be drawn
#define CAPTAINS_PRESTART
	#Set fog and shroud to zero and gold appropriately if user didn't use default settings.
	[modify_side]
		side=1,2
	        shroud=no
	        fog=no
	        gold=800
		income=20
	[/modify_side]


	#Test if era looks not correct...
	[store_side]
		variable=side1
		side=1
	[/store_side]
	[store_side]
		variable=side2
		side=2
	[/store_side]
	[set_variables]
		name=side1_rec_arr
		[split]
			list=$side1.recruit
			key=val
			separator=,
		[/split]
	[/set_variables]
	[set_variables]
		name=side2_rec_arr
		[split]
			list=$side2.recruit
			key=val
			separator=,
		[/split]
	[/set_variables]


	[if]
		{VARIABLE_CONDITIONAL side1_rec_arr.length less_than 12}
		[or]
			{VARIABLE_CONDITIONAL side2_rec_arr.length less_than 12}
			[or]
			[not]
				{VARIABLE_CONDITIONAL side1_rec_arr.length equals $side2_rec_arr.length} 
			[/not]
			[/or]
		[/or]
		[then]
			[set_recruit]
				side=1,2
				recruit={ALL_DEFAULT}
			[/set_recruit]
		[/then]
	[/if]

	{CLEAR_VARIABLE (side1, side2, side1_rec_arr, side2_rec_arr)}

	{VARIABLE PICK_CTR 0}
	{VARIABLE numpicked1 0}
	{VARIABLE numpicked2 0}

	{SCHEDULE_INIT}
	[set_variables]
		name = SCHED_X
		[split]
			list = $SCHEDULE_X
			key = val
			separator = ,
			remove_empty = yes
		[/split]
	[/set_variables]
	[set_variables]
		name = SCHED_Y
		[split]
			list = $SCHEDULE_Y
			key = val
			separator = ,
			remove_empty = yes
		[/split]
	[/set_variables]
	[set_variables]
		name = SCHED_P
		[split]
			list = $SCHEDULE_Player
			key = val
			separator = ,
			remove_empty = yes
		[/split]
	[/set_variables]
	[set_variables]
		name = SCHED_B
		[split]
			list = $SCHEDULE_isBan
			key = val
			separator = ,
			remove_empty = yes
		[/split]
	[/set_variables]
	[set_variables]
		name = PHASE_STR_ARR
		[split]
			list = $PHASE_STRINGS
			key = val
			separator = ,
			remove_empty = yes
		[/split]
	[/set_variables]
	{CLEAR_VARIABLE (SCHEDULE_X, SCHEDULE_Y, SCHEDULE_Player, SCHEDULE_isBan, PHASE_STRINGS)}

	[if]
		[not]
			{VARIABLE_CONDITIONAL SCHED_X.length equals $SCHED_Y.length}
		[/not]
		[or]
		[not]
			{VARIABLE_CONDITIONAL SCHED_Y.length equals $SCHED_P.length}
		[/not]
		[or]
		[not]
			{VARIABLE_CONDITIONAL SCHED_P.length equals $SCHED_B.length}
		[/not]
		[/or]
		[/or]
		[then]
			{DEBUG_MSG "Schedule Lists Mismatch!"}
		[/then]
	[/if]
				
	{VARIABLE TOTAL_PICKS 0}
	{FOREACH SCHED_P i}
		[if] 
			{VARIABLE_CONDITIONAL SCHED_P[$i].val equals 1}
			{VARIABLE_CONDITIONAL SCHED_B[$i].val boolean_equals false}
			[then]
				{VARIABLE_OP TOTAL_PICKS add 1}
			[/then]
		[/if]
	{NEXT i}

	{DRAW_LIST}
#enddef

#This macro defines the "on recruit" event, logic is mostly explained in readme file.
#define CAPTAINS_RECRUIT
{IF_VAR side_number equals $SCHED_P[$PICK_CTR].val (
	[then]
		[store_unit]
			variable = picked_unit
			[filter]
				x=$x1
				y=$y1
			[/filter]
		[/store_unit]

		{MOVE_UNIT_ANIM}	

		{VARIABLE picked_type $picked_unit.type}
		[disallow_recruit]
			type = $picked_type
			side = 1,2
		[/disallow_recruit]
		{IF_VAR SCHED_B[$PICK_CTR].val boolean_equals true (
			[then]
				{BAN_ANIM}
			[/then]
			[else]
				{VARIABLE PICKS[$side_number].units[$numpicked$side_number].t $picked_type}
				{VARIABLE_OP numpicked$side_number add 1}
			[/else]
		)}

		{VARIABLE_OP PICK_CTR add 1}
		[end_turn]
		[/end_turn]
	[/then]
	[else]
		[kill]
			x = x1
			y = y1
		[/kill]
	[/else]
)}
#enddef

#define RBY_OPT STR
[option]
	message = "RBY " + {STR}
	[command]
		[set_variable]
			name = next_scen
			value = "RBY " + {STR} + " " + {RBY_RELEASE}
		[/set_variable]
	[/command]
[/option]
#enddef

#define QUERY_NEXT_SCEN
{VARIABLE next_scen ""}
[while]
	[variable]
		name = next_scen
		equals = ""
	[/variable]
	[do]
		[message]
			x = {MOD_X}
			y = {MOD_Y}
			side_for = 1
			message = _ "Finished! Now select the next scenario."
			{RBY_OPT "Classic"}
			{RBY_OPT "Adventurous"}
			{RBY_OPT "Conservative"}
			{RBY_OPT "Adv + Con"}
			{RBY_OPT "Custom"}
			[option]
				message = "Other"
				[command]
					[message]
						x = {MOD_X}
						y = {MOD_Y}
						message = _ "Choose a valid scenario (or its going to crash). Leave empty to cancel. 

Also this scenario should have save_id's in RBY format."
						[text_input]
							variable = next_scen
							label = _ "Scenario ID"
							text = "RBY Hamlets 12"
							max_length = 40
						[/text_input]
					[/message]
				[/command]
			[/option]
		[/message]
	[/do]
[/while]
[print]
	text = "Will move to " + $next_scen + " when P1 ends turn."
	size=20
	duration=750
	red,green,blue=0,255,0
[/print]
#enddef

#This defines the end level event
#define ISSUE_END_LEVEL
[event]
	name = side turn end

	[set_variable]
		name = p1_comma_separated_list
		[join]
			variable = PICKS[1].units
			key = t
			separator = ,
			remove_empty = yes
		[/join]
	[/set_variable]
	[set_variable]
		name = p2_comma_separated_list
		[join]
			variable = PICKS[2].units
			key = t
			separator = ,
			remove_empty = yes
		[/join]
	[/set_variable]
	[set_recruit]
		side=1
		recruit = $p1_comma_separated_list
	[/set_recruit]
	[set_recruit]
		side=2
		recruit = $p2_comma_separated_list
	[/set_recruit]

	#make sure that none of the banned / picked units end up on recall list!
	[kill]
		side=1,2
		canrecruit=no
	[/kill]

	{CLEAR_VARIABLE (SCHED_X, SCHED_Y, SCHED_P, SCHED_B, PHASE_STR_ARR, PICK_CTR, numpicked1, numpicked2, PICKS, picked_type, TOTAL_PICKS, p1_comma_separated_list, p2_comma_separated_list)}

	[endlevel]
	        result=victory
	        next_scenario=$next_scen

	        carryover_percentage=0
	        carryover_report=false
	        carryover_add=false
	        linger_mode=false
	        save=no
		replay_save=no
	[/endlevel]
[/event]
#enddef

#define CAPTAINS_SIDE_TURN
{IF_VAR PICK_CTR greater_than_equal_to $SCHED_P.length (
	[then]
		{IF_VAR side_number equals 1 (
			[then]
				[set_recruit]
					side = 1,2
					recruit = ""
				[/set_recruit]
				{QUERY_NEXT_SCEN}
				{ISSUE_END_LEVEL}
			[/then]
			[else]
				[end_turn]
				[/end_turn]
			[/else]

		)}
	[/then]
	[else]
		{IF_VAR side_number equals ($SCHED_P[$PICK_CTR].val) (
			[then]
			[/then]
			[else]
				[end_turn]
				[/end_turn]
			[/else]
		)}
	[/else]
)}
#enddef

#define CAPTAIN_EVENTS
[event]
	name=start
	{MODERATOR_GREETING}
[/event]
[event]
	name = prestart
	{CAPTAINS_PRESTART}
[/event]
[event]
	name = recruit
	first_time_only = no

	{CAPTAINS_RECRUIT}
[/event]
[event]
	name = side turn
	first_time_only = no

	{DRAW_LIST}
	{CAPTAINS_SIDE_TURN}
[/event]
#enddef

#define BAN_ANIM
[petrify]
	x=$SCHED_X[$PICK_CTR].val
	y=$SCHED_Y[$PICK_CTR].val
[/petrify]
#enddef

#define MOVE_UNIT_ANIM
[move_unit]
	x = $x1
	y = $y1
			
	to_x = $SCHED_X[$PICK_CTR].val
	to_y = $SCHED_Y[$PICK_CTR].val
	check_passability = no
[/move_unit]	
#enddef

#define ALL_DEFAULT 
	Drake Burner,Drake Clasher,Drake Glider,Drake Fighter,Saurian Skirmisher,Saurian Augur,Dwarvish Guardsman,Dwarvish Fighter,Dwarvish Ulfserker,Dwarvish Thunderer,Thief,Poacher,Footpad,Gryphon Rider,Cavalryman,Horseman,Spearman,Fencer,Heavy Infantryman,Bowman,Mage,Merman Fighter,Orcish Grunt,Troll Whelp,Wolf Rider,Orcish Archer,Orcish Assassin,Naga Fighter,Goblin Spearman,Elvish Fighter,Elvish Archer,Mage,Elvish Shaman,Elvish Scout,Wose,Merman Hunter,Skeleton,Skeleton Archer,Walking Corpse,Ghost,Vampire Bat,Dark Adept,Ghoul
#enddef
